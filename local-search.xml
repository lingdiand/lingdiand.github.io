<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/08/03/hello-world/"/>
    <url>/2021/08/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><p>aaa</p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git使用</title>
    <link href="/2021/07/25/git%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/07/25/git%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Git介绍"><a href="#Git介绍" class="headerlink" title="Git介绍"></a>Git介绍</h1><h2 id="1-什么是Git"><a href="#1-什么是Git" class="headerlink" title="1.什么是Git?"></a>1.什么是Git?</h2><p>git为一个分布式的版本控制软件，由林纳斯创作，最初是用于更好地管理Linux内核的开发，因为提交Linux功能的人太多了，最终都需要手动进行合并代码</p><p>分布式在于每个人都可以拷贝完整的项目到本地进行开发</p><p>版本控制：Git会保留每次提交时的commitID，这样可以回滚到之前的版本</p><span id="more"></span><p>使用Git，不但能自动记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要瞄一眼就可以</p><h2 id="2-名词介绍"><a href="#2-名词介绍" class="headerlink" title="2.名词介绍"></a>2.名词介绍</h2><p>工作区：就是工作的区域，写代码的地方，在文件夹中使用git init命令后，该文件夹变为工作区，我们所有的操作都是在该文件夹中进行</p><p>暂存区：使用git add &lt;文件名&gt;可以将文件放到暂存区，是我们把文件进行提交前的一个过渡阶段，临时存储。所有暂存的文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”</p><p>本地仓库：使用git commit会将暂存区内容提交到本地仓库中，如果我们在commit后再次修改文件，则需要再次git add</p><p>远程仓库：和本地仓库一样，但是位于远端(服务器)，在团队开发中我们需要一个远程仓库进行提交(push)、下载(pull)我们的项目，用于团队协作开发</p><p>远程仓库副本：可以理解为存在于本地的远程仓库缓存。如需更新，可通过git fetch/pull命令获取远程仓库内容。使用fech获取时，并未合并到本地仓库，此时可使用git merge实现远程仓库副本与本地仓库的合并</p><p>当我们提交项目时会经过暂存(git add *)-&gt;提交(git commit)-&gt;上传远端(git push)</p><p><img src="https://gitee.com/lingdiand/image-repo/raw/master/20210722210005.jpeg"></p><h2 id="3-Git仓库组成"><a href="#3-Git仓库组成" class="headerlink" title="3.Git仓库组成"></a>3.Git仓库组成</h2><p>使用git init命令后生成.git隐藏文件夹，该文件夹中存放的是我们所提交的文档索引内容，Git 可基于文档索引内容对其所管理的文档进行内容追踪，从而实现文档的版本控制。</p><p><img src="https://gitee.com/lingdiand/image-repo/raw/master/20210724212912.png"></p><p>config文件：用于配置本地仓库的一些信息，仓库名、当前分支、绑定的远程仓库地址</p><p>Index（索引）：进行过提交的操作后会有该文件。将工作目录下所有文件（包含子目录）生成快照，存放到一个临时的存储区域，Git 称该区域为索引</p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1.基本命令"></a>1.基本命令</h2><blockquote><p> 命令的操作都是在工作区下进行</p><p> git中可以使用Linux命令</p><p> git中的复制粘贴可以选中要复制的内容，按鼠标中键</p></blockquote><p>设置签名</p><p>配置完成后可以在C:\Users\${用户名}\.gitconfig中看到</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;1351740185@qq.com&quot;</span><br>git config --global user.name <span class="hljs-string">&quot;lingdiand&quot;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git init<span class="hljs-comment">#将项目交给git管理，在项目根目录下出现.git文件夹</span><br>git add * <span class="hljs-comment">#将所有未被git管理的文件纳入到git的管理中，可以理解为该文件被git所跟踪</span><br>git status<span class="hljs-comment">#查看当前文件的状态(有哪些文件更改了没有提交)</span><br>git commit -m <span class="hljs-string">&#x27;提交了XXX&#x27;</span>  <span class="hljs-comment">#将代码提交到本地仓库，-m 提交注释,可以说明自己这次提交做了些什么</span><br></code></pre></div></td></tr></table></figure><p>关于远程仓库的解释下面会讲到</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git remote add origin https://gitee.com/group-8-dian/hsp.git <span class="hljs-comment">#将本地仓库与远程仓库绑定</span><br>git remote show origin <span class="hljs-comment">#显示远程库origin里的资源 </span><br>git push origin master  <span class="hljs-comment">#将本地仓库推送到远程仓库</span><br>git pull origin master<span class="hljs-comment">#下载远程仓库的项目(团队开发要先下载再上传)</span><br>git fetch origin master<br></code></pre></div></td></tr></table></figure><blockquote><p>origin为远程仓库名，master为分支名</p><p>pull=fetch+merge    git fetch并没有更改本地仓库的代码，只是拉取了远程仓库的commitID</p></blockquote><h2 id="2-状态查看"><a href="#2-状态查看" class="headerlink" title="2.状态查看"></a>2.状态查看</h2><p>reset一共有三种模式</p><ul><li>–hard：不保留所有变更，所有的一切都会还原到哈希值对应项目的状态</li><li>–soft：保留变更且变更内容处于Staged</li><li>–mixed：保留变更且变更内容处于Modified</li></ul><blockquote><p>log和reflog中显示的哈希值其实是一样的，通过reset可以回退版本</p><p>在 Git 中，用 <strong>HEAD</strong> 表示当前版本，也就是最新的提交 commit id，上一个版本就是 HEAD^，上上一个版本就是 HEAD^^，当然往上 100 个版本写 100 个 ^ 比较容易数不过来，所以写成 HEAD~100</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span><span class="hljs-comment">#查看日志信息</span><br>git reflog<span class="hljs-comment">#查看所有操作记录</span><br>git reset --hard 版本号<span class="hljs-comment">#回滚，版本号为日志中的哈希值</span><br>git reset --hard HEAD^<span class="hljs-comment">#回退上一个版本</span><br></code></pre></div></td></tr></table></figure><p><strong>文件状态：</strong></p><ol><li>没有被add过的文件叫untracked</li><li>add之后文件处于staged状态，等待commit</li><li>commit之后文件处于unmodified，如果是modified是因为文件会跟仓库中的文件对比</li><li>当unmodified的文件被修改则会变为modified状态</li><li>modified之后的文件add之后将继续变为staged状态</li><li>unmodifed的文件还有一种可能是已经不再需要了，那么可以remove它不再追踪变为untracked状态</li></ol><p><img src="https://gitee.com/lingdiand/image-repo/raw/master/20210724223819.png"></p><h2 id="3-分支命令"><a href="#3-分支命令" class="headerlink" title="3.分支命令"></a>3.分支命令</h2><p>在初始化仓库时默认分支为master(主分支)，前面在切换版本时需要不停的reset，我们可以通过分支来解决频繁的操作，Git 鼓励在工作流程中频繁使用分支与合并</p><p>在开发过程中，一般不对master进行修改，而是不同的部门、功能小组划分不同的分支进行开发，没有问题了合并到 master 分支发布。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git branch &lt;branchName&gt;   <span class="hljs-comment">#只是新建了一条分支，并未切换</span><br>git checkout -b &lt;branchName&gt;   <span class="hljs-comment">#创建并切换分支</span><br>git branch -d &lt;branchName&gt;   <span class="hljs-comment">#删除分支</span><br>git checkout master<span class="hljs-comment">#切换主分支</span><br>git branch<span class="hljs-comment">#查看所有分支</span><br>git merge &lt;branchName&gt;<span class="hljs-comment">#合并分支</span><br></code></pre></div></td></tr></table></figure><h2 id="4-远程操作"><a href="#4-远程操作" class="headerlink" title="4.远程操作"></a>4.远程操作</h2><h3 id="绑定仓库"><a href="#绑定仓库" class="headerlink" title="绑定仓库"></a>绑定仓库</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git remote add origin https://gitee.com/group-8-dian/hsp.git <span class="hljs-comment">#将本地仓库与远程仓库绑定</span><br></code></pre></div></td></tr></table></figure><h3 id="生成SSH-key"><a href="#生成SSH-key" class="headerlink" title="生成SSH key"></a>生成<strong>SSH key</strong></h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;邮件地址&quot;</span><br></code></pre></div></td></tr></table></figure><p>然后连续3次回车，会在用户目录下生成一个文件，找到<code>.ssh\id_rsa.pub</code>文件，打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p><p>将刚复制的内容粘贴到key那里，title随便填，保存</p><p><img src="https://gitee.com/lingdiand/image-repo/raw/master/20210724221458.png"></p><p>测试是否成功</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh -T git<span class="hljs-variable">@github</span>.com <span class="hljs-comment"># 注意邮箱地址不用改</span><br></code></pre></div></td></tr></table></figure><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git push origin master  <span class="hljs-comment">#将本地仓库推送到远程仓库</span><br></code></pre></div></td></tr></table></figure><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git pull origin master<span class="hljs-comment">#下载远程仓库的项目(团队开发要先下载再上传)</span><br></code></pre></div></td></tr></table></figure><blockquote><p> pull远程仓库后，本地再新建一个分支需要设置上流分支才可以push</p><p> 而从远程分支 checkout 出来的本地分支，即checkout分支本身来自远程仓库，称为跟踪分支(tracking  branch)。跟踪分支是一种和远程分支有直接联系的本地分支。在跟踪分支里输入git push，Git会自行推断应该向哪个服务器的哪个分支推送数据。反过来，在这些分支里运行git pull 会获取所有远程索引，并把它们的数据都合并到本地分支中来</p><p> 在克隆仓库时，Git 通常会自动创建一个名为 master 的分支来跟踪 origin/master。这正是 git push 和 git pull  一开始就能正常工作的原因。当然，你可以随心所欲地设定为其它跟踪分支，比如 origin 上除了 master 之外的其它分支</p></blockquote><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><blockquote><p>pull=fetch+merge    git fetch并没有更改本地仓库的代码，只是拉取了远程仓库的commitID</p></blockquote><blockquote><p><strong>git fetch</strong><br>比如本地仓库的节点为1-&gt;2，此时head指针指向2。远程仓库为1-&gt;2-&gt;3-&gt;4，git fetch后本地仓库变为1-&gt;2-&gt;3-&gt;4，本地仓库的12加上远程仓库的34，但是head指针还是指向2，并没有进行合并</p></blockquote><p><img src="https://pic3.zhimg.com/50/v2-686ae54f78ea69b6c00cc8b159cf7369_720w.webp?source=1940ef5c"></p><blockquote><p><strong>git pull</strong></p><p>最上面的节点合并了箭头两个节点的内容</p></blockquote><p><img src="https://pic3.zhimg.com/50/v2-1298832b975cf9cf0ad6c399ec5da32d_720w.webp?source=1940ef5c"></p><p>可以看到，Git中最重要的是commitID，我们需要通过它进行各种操作，通过<strong>head</strong>指针指向某一个commitID</p><p>Git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针，是commit序列的集合载体</p><p><a href="https://www.bilibili.com/video/BV1BE411g7SV">https://www.bilibili.com/video/BV1BE411g7SV</a></p><p><a href="https://blog.csdn.net/halaoda/article/details/78661334">https://blog.csdn.net/halaoda/article/details/78661334</a>    </p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
